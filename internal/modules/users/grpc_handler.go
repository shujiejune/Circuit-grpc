package users

import (
	"context"

	pb "dispatch-and-delivery/pkg/proto/user"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// GRPCHandler is the gRPC handler for the user service.
// It implements the UserServiceServer interface generated by protoc.
type GRPCHandler struct {
	// It must embed this to forward-compatibly implement the interface.
	pb.UnimplementedUserServiceServer

	// It holds a dependency on the core business logic service.
	service ServiceInterface
}

// NewGRPCHandler creates a new gRPC handler for the user service.
func NewGRPCHandler(s ServiceInterface) *GRPCHandler {
	return &GRPCHandler{service: s}
}

// RegisterUser handles the gRPC request for creating a new user.
func (h *GRPCHandler) RegisterUser(ctx context.Context, req *pb.RegisterUserRequest) (*pb.RegisterUserResponse, error) {
	// Here we would typically convert the gRPC request to a struct that our service understands,
	// but for simplicity, we can pass the primitive values directly.
	createdUser, err := h.service.Signup(ctx, req.Name, req.Email, req.Password)
	if err != nil {
		// gRPC has its own error model. We should return gRPC status codes.
		// For now, we return the plain error, but this would be enhanced.
		return nil, err
	}

	// Convert the service layer's response model to the gRPC response model.
	return &pb.RegisterUserResponse{
		Id:        createdUser.ID,
		Name:      createdUser.Name,
		Email:     createdUser.Email,
		CreatedAt: timestamppb.New(createdUser.CreatedAt),
	}, nil
}

// LoginUser handles the gRPC request for authenticating a user.
func (h *GRPCHandler) LoginUser(ctx context.Context, req *pb.LoginUserRequest) (*pb.LoginUserResponse, error) {
	token, err := h.service.Login(ctx, req.Email, req.Password)
	if err != nil {
		return nil, err
	}

	return &pb.LoginUserResponse{
		AccessToken: token,
	}, nil
}

// GetUserProfile handles the gRPC request for fetching a user's profile.
func (h *GRPCHandler) GetUserProfile(ctx context.Context, req *pb.GetUserProfileRequest) (*pb.GetUserProfileResponse, error) {
	user, err := h.service.GetUserByID(ctx, req.UserId)
	if err != nil {
		return nil, err
	}

	return &pb.GetUserProfileResponse{
		Id:        user.ID,
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: timestamppb.New(user.CreatedAt),
		UpdatedAt: timestamppb.New(user.UpdatedAt),
	}, nil
}
